"use strict";(self.webpackChunktechdocs=self.webpackChunktechdocs||[]).push([[8793],{3941:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"postgres","title":"PostgreSQL","description":"Convert array to string","source":"@site/docs/postgres.md","sourceDirName":".","slug":"/postgres","permalink":"/techdocs/docs/postgres","draft":false,"unlisted":false,"editUrl":"https://github.com/lfir/techdocs/edit/devel/docs/postgres.md","tags":[],"version":"current","lastUpdatedBy":"Leandro","lastUpdatedAt":1745087332000,"frontMatter":{"title":"PostgreSQL"},"sidebar":"defaultSidebar","previous":{"title":"Postfix","permalink":"/techdocs/docs/postfix"},"next":{"title":"Process management","permalink":"/techdocs/docs/processmanagement"}}');var o=n(4848),l=n(8453);const r={title:"PostgreSQL"},a=void 0,i={},d=[{value:"Convert array to string",id:"convert-array-to-string",level:2},{value:"Equality comparisons contemplating null values",id:"equality-comparisons-contemplating-null-values",level:2},{value:"Export table as json",id:"export-table-as-json",level:2},{value:"Group by colA and select any one value of colB to get only one row per group",id:"group-by-cola-and-select-any-one-value-of-colb-to-get-only-one-row-per-group",level:2},{value:"Raise notification with row data as JSON after inserts",id:"raise-notification-with-row-data-as-json-after-inserts",level:2},{value:"pgtap commands",id:"pgtap-commands",level:2},{value:"psql options and commands",id:"psql-options-and-commands",level:2},{value:"Connection options",id:"connection-options",level:3},{value:"Other options",id:"other-options",level:3},{value:"Backup all dbs (including roles)",id:"backup-all-dbs-including-roles",level:3},{value:"Restore all dbs",id:"restore-all-dbs",level:3},{value:"Backup one db (without roles)",id:"backup-one-db-without-roles",level:3},{value:"Backup one table",id:"backup-one-table",level:3},{value:"Restore one db or table",id:"restore-one-db-or-table",level:3},{value:"Export query result to csv file from the shell",id:"export-query-result-to-csv-file-from-the-shell",level:3},{value:"shp2pgsql commands",id:"shp2pgsql-commands",level:2}];function c(e){const s={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h2,{id:"convert-array-to-string",children:"Convert array to string"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:"array_to_string(anArray, aDelimiter, valueOfNullElems)\n"})}),"\n",(0,o.jsx)(s.admonition,{type:"note",children:(0,o.jsx)(s.p,{children:"Last param is optional, if not present null elements are removed."})}),"\n",(0,o.jsx)(s.h2,{id:"equality-comparisons-contemplating-null-values",children:"Equality comparisons contemplating null values"}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"<>"})," and ",(0,o.jsx)(s.code,{children:"!="})," are equivalent. Both evaluate for values, which ",(0,o.jsx)(s.code,{children:"NULL"})," is\nnot. ",(0,o.jsx)(s.code,{children:"NULL"})," is a placeholder to say there is absence of a value. You can\nonly use ",(0,o.jsx)(s.code,{children:"IS NULL"}),"/",(0,o.jsx)(s.code,{children:"IS NOT NULL"})," as predicates for such situations."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-sql",children:"value IS NULL\n"})}),"\n",(0,o.jsxs)(s.p,{children:["If you know that value is never ",(0,o.jsx)(s.code,{children:"-1"})," (for example) you can say:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-sql",children:"coalesce(value, -1) <> zz\n"})}),"\n",(0,o.jsx)(s.h2,{id:"export-table-as-json",children:"Export table as json"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-sql",children:"COPY (SELECT row_to_json(t) FROM tableName AS t) TO '/tmp/myfile';\n"})}),"\n",(0,o.jsx)(s.h2,{id:"group-by-cola-and-select-any-one-value-of-colb-to-get-only-one-row-per-group",children:"Group by colA and select any one value of colB to get only one row per group"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-sql",children:"SELECT colA, min(colB) FROM tableName GROUP BY colA;\n"})}),"\n",(0,o.jsx)(s.admonition,{type:"tip",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"min()"})," works with text columns too."]})}),"\n",(0,o.jsx)(s.h2,{id:"raise-notification-with-row-data-as-json-after-inserts",children:"Raise notification with row data as JSON after inserts"}),"\n",(0,o.jsx)(s.p,{children:"Add a \u201cafter insert\u201d trigger to the table :"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-sql",children:"CREATE TRIGGER tblexample_after\nAFTER INSERT\nON tblexample\nFOR EACH ROW\nEXECUTE PROCEDURE notify();\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Within the trigger function, we send a notify event (",(0,o.jsx)(s.code,{children:"'myEvent'"}),") with the\nrow information. We need to send plain text in the notify event so we\u2019ll\nuse JSON to encode our row data (",(0,o.jsx)(s.code,{children:"row_to_json"})," is a builtin function)."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-sql",children:"CREATE OR REPLACE FUNCTION notify() RETURNS TRIGGER AS\n$BODY$\nBEGIN\n    PERFORM pg_notify('myEvent', row_to_json(NEW)::text);\n    RETURN NEW;\nEND;\n$BODY$\nLANGUAGE 'plpgsql' VOLATILE COST 100;\n"})}),"\n",(0,o.jsx)(s.h2,{id:"pgtap-commands",children:"pgtap commands"}),"\n",(0,o.jsxs)(s.p,{children:["Run tests file with ",(0,o.jsx)(s.code,{children:"pg_prove"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"sudo su postgres -c 'pg_prove --dbname tst test0.sql'\n"})}),"\n",(0,o.jsx)(s.h2,{id:"psql-options-and-commands",children:"psql options and commands"}),"\n",(0,o.jsx)(s.h3,{id:"connection-options",children:"Connection options"}),"\n",(0,o.jsxs)("table",{children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:"Option"}),(0,o.jsx)("th",{children:"Description"})]})}),(0,o.jsxs)("tbody",{children:[(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"-h"}),(0,o.jsx)("td",{children:"Host address."})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"-p"}),(0,o.jsx)("td",{children:"Port number."})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"-U"}),(0,o.jsx)("td",{children:"Username. By default OS user is used."})]})]})]}),"\n",(0,o.jsx)(s.h3,{id:"other-options",children:"Other options"}),"\n",(0,o.jsxs)("table",{children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:"Option"}),(0,o.jsx)("th",{children:"Description"})]})}),(0,o.jsxs)("tbody",{children:[(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"--clean"}),(0,o.jsx)("td",{children:"Drop database."})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"--create"}),(0,o.jsx)("td",{children:"Creates database during restore."})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"--dbname"}),(0,o.jsx)("td",{children:"For initial connection the name of any existing database can be used."})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"--if-exists"}),(0,o.jsx)("td",{children:"Does not raise error if database does not exist."})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"--role"}),(0,o.jsx)("td",{children:"Role used to execute statements in the database."})]})]})]}),"\n",(0,o.jsx)(s.h3,{id:"backup-all-dbs-including-roles",children:"Backup all dbs (including roles)"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"sudo su postgres -c 'pg_dumpall -f /tmp/outputFileName.backup'\n"})}),"\n",(0,o.jsx)(s.h3,{id:"restore-all-dbs",children:"Restore all dbs"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"sudo su postgres -c 'psql -f /tmp/outputFileName.backup postgres'\n"})}),"\n",(0,o.jsx)(s.h3,{id:"backup-one-db-without-roles",children:"Backup one db (without roles)"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"sudo su postgres -c 'pg_dump -Fc -d dbName -f /tmp/outputFileName.backup'\n"})}),"\n",(0,o.jsx)(s.h3,{id:"backup-one-table",children:"Backup one table"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"sudo su postgres -c 'pg_dump -Fc -d dbName -t schemaName.tableName -f /tmp/outputFileName.backup'\n"})}),"\n",(0,o.jsx)(s.h3,{id:"restore-one-db-or-table",children:"Restore one db or table"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"sudo su postgres -c 'pg_restore -d dbName /tmp/outputFileName.backup'\n"})}),"\n",(0,o.jsx)(s.h3,{id:"export-query-result-to-csv-file-from-the-shell",children:"Export query result to csv file from the shell"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"sudo su postgres -c 'psql -d dbName -c \"COPY (SELECT * FROM tableName) TO stdout WITH csv header;\" -o fileName.csv'\n"})}),"\n",(0,o.jsx)(s.h2,{id:"shp2pgsql-commands",children:"shp2pgsql commands"}),"\n",(0,o.jsxs)(s.p,{children:["Import shapefile and create spatial index for the new table (requires\n",(0,o.jsx)(s.strong,{children:"postgis"})," package):"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"shp2pgsql -I -s <SRID> <PATH/TO/SHAPEFILE> <SCHEMA>.<DBTABLE> | psql -U postgres -d <DBNAME>\n"})})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>a});var t=n(6540);const o={},l=t.createContext(o);function r(e){const s=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(l.Provider,{value:s},e.children)}}}]);