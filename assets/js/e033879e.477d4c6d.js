"use strict";(self.webpackChunktechdocs=self.webpackChunktechdocs||[]).push([[6415],{7288:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var r=t(4848),i=t(8453);const s={title:"Git"},c=void 0,a={id:"git",title:"Git",description:"Branches",source:"@site/docs/git.md",sourceDirName:".",slug:"/git",permalink:"/techdocs/docs/git",draft:!1,unlisted:!1,editUrl:"https://github.com/lfir/techdocs/edit/devel/docs/git.md",tags:[],version:"current",lastUpdatedBy:"Leandro",lastUpdatedAt:1725279075,formattedLastUpdatedAt:"Sep 2, 2024",frontMatter:{title:"Git"},sidebar:"defaultSidebar",previous:{title:"Formulas",permalink:"/techdocs/docs/formulas"},next:{title:"Grub 2",permalink:"/techdocs/docs/grub"}},o={},h=[{value:"Branches",id:"branches",level:2},{value:"Create branch",id:"create-branch",level:3},{value:"Delete branch",id:"delete-branch",level:3},{value:"List branches",id:"list-branches",level:3},{value:"Merge target branch with current",id:"merge-target-branch-with-current",level:3},{value:"Move to branch",id:"move-to-branch",level:3},{value:"Push local branch not existent in the remote repo",id:"push-local-branch-not-existent-in-the-remote-repo",level:3},{value:"Change remote&#39;s URL from HTTPS to SSH",id:"change-remotes-url-from-https-to-ssh",level:2},{value:"Cherry-pick",id:"cherry-pick",level:2},{value:"Create release tag",id:"create-release-tag",level:2},{value:"Download upstream and automatically merge local with it (fast forward)",id:"download-upstream-and-automatically-merge-local-with-it-fast-forward",level:2},{value:"Download upstream without merging changes",id:"download-upstream-without-merging-changes",level:2},{value:"Hooks",id:"hooks",level:2},{value:"List commits in current branch",id:"list-commits-in-current-branch",level:2},{value:"Remove and stop tracking file",id:"remove-and-stop-tracking-file",level:2},{value:"Undo changes",id:"undo-changes",level:2},{value:"Return to state of specific commit",id:"return-to-state-of-specific-commit",level:3},{value:"Revert changes to a file if they haven\u2019t been committed yet",id:"revert-changes-to-a-file-if-they-havent-been-committed-yet",level:3},{value:"Revert everything from HEAD back to a commit without losing history",id:"revert-everything-from-head-back-to-a-commit-without-losing-history",level:3},{value:"Stash",id:"stash",level:3},{value:"Delete all elements in the stack",id:"delete-all-elements-in-the-stack",level:4},{value:"List elements in the stack and their index",id:"list-elements-in-the-stack-and-their-index",level:4},{value:"Restore changes from a specific element in the stack",id:"restore-changes-from-a-specific-element-in-the-stack",level:4},{value:"Restore changes from the head of the stack and remove it from the stack",id:"restore-changes-from-the-head-of-the-stack-and-remove-it-from-the-stack",level:4},{value:"Save working directory changes to the stack",id:"save-working-directory-changes-to-the-stack",level:4}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"branches",children:"Branches"}),"\n",(0,r.jsx)(n.h3,{id:"create-branch",children:"Create branch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git branch branchName\n"})}),"\n",(0,r.jsx)(n.h3,{id:"delete-branch",children:"Delete branch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git branch -D branchName\n"})}),"\n",(0,r.jsx)(n.h3,{id:"list-branches",children:"List branches"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git branch\n"})}),"\n",(0,r.jsx)(n.h3,{id:"merge-target-branch-with-current",children:"Merge target branch with current"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git merge targetBranchName\n"})}),"\n",(0,r.jsx)(n.p,{children:"Useful options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--abort"})," aborts the merge process and reconstructs the pre-merge state (if the merge has not been committed yet and there is a merge conflict)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--ff"})," resolves the merge as a fast-forward if possible. Merge commit is not created. Used by default."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--no-ff"})," creates a merge commit in all cases, even when the merge could instead be resolved as a fast-forward."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-m msg"})," sets the commit message to be used for the merge commit (in case one is created)."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"move-to-branch",children:"Move to branch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git checkout branchName\n"})}),"\n",(0,r.jsx)(n.h3,{id:"push-local-branch-not-existent-in-the-remote-repo",children:"Push local branch not existent in the remote repo"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git push --set-upstream origin localBranchName\n"})}),"\n",(0,r.jsx)(n.h2,{id:"change-remotes-url-from-https-to-ssh",children:"Change remote's URL from HTTPS to SSH"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git remote set-url origin git@github.com:USERNAME/REPOSITORY.git\n"})}),"\n",(0,r.jsx)(n.h2,{id:"cherry-pick",children:"Cherry-pick"}),"\n",(0,r.jsx)(n.p,{children:"Apply a commit from one branch to a different one."}),"\n",(0,r.jsx)(n.p,{children:"Find commit id."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git log\n"})}),"\n",(0,r.jsx)(n.p,{children:"Switch to target branch and apply changes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git checkout branch\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git cherry-pick commitID\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id1..idN"})," merges several commits, from ",(0,r.jsx)(n.code,{children:"id1"})," to ",(0,r.jsx)(n.code,{children:"idN"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"If the name of a branch is passed instead of a commit id the last commit of that branch is selected."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-x"})," adds source commit id to commit message."]}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"create-release-tag",children:"Create release tag"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create a Lightweight or an Annotated tag (tagName cannot contain spaces).\n# Lightweight tag.\ngit tag tagName\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Annotated tag.\ngit tag -a tagName -m 'tagMessage'\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Transfer tag to remote server.\ngit push -u origin tagName\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Appears as ",(0,r.jsx)(n.code,{children:"tagName"}),' in the project\'s "Tags" page on GitHub and a Release can\nbe created based on it in the "Releases" section of the repository.']})}),"\n",(0,r.jsx)(n.h2,{id:"download-upstream-and-automatically-merge-local-with-it-fast-forward",children:"Download upstream and automatically merge local with it (fast forward)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git pull\n"})}),"\n",(0,r.jsx)(n.h2,{id:"download-upstream-without-merging-changes",children:"Download upstream without merging changes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git fetch\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Branches are now accessible locally and can be merged into the currrent branch."})}),"\n",(0,r.jsx)(n.h2,{id:"hooks",children:"Hooks"}),"\n",(0,r.jsxs)(n.p,{children:["Scripts triggered by certain events. These scripts take one of the names below and have to be placed in ",(0,r.jsx)(n.code,{children:".git/hooks"})," dir."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pre-commit\npost-commit\npre-receive # Triggered when the remote receives the pushed changes\npost-receive\n"})}),"\n",(0,r.jsx)(n.h2,{id:"list-commits-in-current-branch",children:"List commits in current branch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git log\n"})}),"\n",(0,r.jsx)(n.h2,{id:"remove-and-stop-tracking-file",children:"Remove and stop tracking file"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git rm fileName\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'git commit -m "remove file"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'echo "fileName" >> .gitignore\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'git commit -m "stop tracking file"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"undo-changes",children:"Undo changes"}),"\n",(0,r.jsx)(n.h3,{id:"return-to-state-of-specific-commit",children:"Return to state of specific commit"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git reset commitID # or commitID~1 commit before commitID\n"})}),"\n",(0,r.jsx)(n.p,{children:"Options."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--hard"})," modifies Staging, History and Working Directory."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--mixed"})," modifies Staging and History."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--soft"})," modifies History."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--merge"})," like --hard but does not affect uncommitted changes."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Push changes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git push --force origin master\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If forcing a push doesn't work the remote server is refusing non fast-forward pushes either via\n",(0,r.jsx)(n.code,{children:"receive.denyNonFastForwards"})," config variable or update / pre-receive hook."]})}),"\n",(0,r.jsx)(n.p,{children:"Manually replace files (preserves history)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Reset the local state.\ngit reset --hard \n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Copy the relevant part, e.g. the src directory.\ncp -r src/ /tmp/\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Get the latest state again.\ngit pull\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Remove what is not needed anymore.\nrm -rf src/\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Restore from the copy.\ncp -r /tmp/src .\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Commit and push.\ngit commit -am 'Revert to commitID'\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git push\n"})}),"\n",(0,r.jsx)(n.h3,{id:"revert-changes-to-a-file-if-they-havent-been-committed-yet",children:"Revert changes to a file if they haven\u2019t been committed yet"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git checkout -- file\n"})}),"\n",(0,r.jsx)(n.h3,{id:"revert-everything-from-head-back-to-a-commit-without-losing-history",children:"Revert everything from HEAD back to a commit without losing history"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git revert --no-commit 0766c053..HEAD # HEAD = latest commit in current branch\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git commit\n"})}),"\n",(0,r.jsx)(n.h3,{id:"stash",children:"Stash"}),"\n",(0,r.jsx)(n.h4,{id:"delete-all-elements-in-the-stack",children:"Delete all elements in the stack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git stash drop\n"})}),"\n",(0,r.jsx)(n.h4,{id:"list-elements-in-the-stack-and-their-index",children:"List elements in the stack and their index"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git stash list\n"})}),"\n",(0,r.jsx)(n.h4,{id:"restore-changes-from-a-specific-element-in-the-stack",children:"Restore changes from a specific element in the stack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git stash apply --index elementIndex\n"})}),"\n",(0,r.jsx)(n.h4,{id:"restore-changes-from-the-head-of-the-stack-and-remove-it-from-the-stack",children:"Restore changes from the head of the stack and remove it from the stack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git stash pop\n"})}),"\n",(0,r.jsx)(n.h4,{id:"save-working-directory-changes-to-the-stack",children:"Save working directory changes to the stack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"git stash\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"push -m message"})," can be used to add a description of the changes that are going to be stashed."]})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);