"use strict";(self.webpackChunktechdocs=self.webpackChunktechdocs||[]).push([[1174],{2498:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"systemd","title":"Systemd","description":"Get units that failed to start","source":"@site/docs/systemd.md","sourceDirName":".","slug":"/systemd","permalink":"/techdocs/docs/systemd","draft":false,"unlisted":false,"editUrl":"https://github.com/lfir/techdocs/edit/devel/docs/systemd.md","tags":[],"version":"current","lastUpdatedBy":"Leandro","lastUpdatedAt":1754176961000,"frontMatter":{"title":"Systemd"},"sidebar":"defaultSidebar","previous":{"title":"SSH","permalink":"/techdocs/docs/ssh"},"next":{"title":"Text processing","permalink":"/techdocs/docs/textprocessing"}}');var i=s(4848),r=s(8453);const l={title:"Systemd"},d=void 0,c={},o=[{value:"Get units that failed to start",id:"get-units-that-failed-to-start",level:2},{value:"Journalctl",id:"journalctl",level:2},{value:"Useful options",id:"useful-options",level:3},{value:"Sample unit file insync.service (app auto start)",id:"sample-unit-file-insyncservice-app-auto-start",level:2}];function a(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"get-units-that-failed-to-start",children:"Get units that failed to start"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"systemctl list-units --state=failed\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"Without passing any options the command shows all installed unit files and their status."})}),"\n",(0,i.jsx)(t.h2,{id:"journalctl",children:"Journalctl"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"journalctl"})," can be used to browse all systemd journal logs."]}),"\n",(0,i.jsx)(t.h3,{id:"useful-options",children:"Useful options"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Option"}),(0,i.jsx)("th",{children:"Description"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"_EXE=/usr/bin/docker"}),(0,i.jsx)("td",{children:"Display logs for a specific executable."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"_PID=5000"}),(0,i.jsx)("td",{children:"Display logs for a specific process ID."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"_UID=1000"}),(0,i.jsx)("td",{children:"Show logs for a specific user ID."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"-b"}),(0,i.jsx)("td",{children:"Display logs starting from the current boot."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"-b -1"}),(0,i.jsx)("td",{children:"Show logs starting from the previous boot."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"-f"}),(0,i.jsxs)("td",{children:["Follow logs in real-time (similar to ",(0,i.jsx)(t.code,{children:"tail -f"}),")."]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:'--grep "pattern"'}),(0,i.jsx)("td",{children:"Filter logs by a specific pattern or string."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"-k"}),(0,i.jsx)("td",{children:"Show kernel logs only."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"--no-page"}),(0,i.jsx)("td",{children:"Disable output pagination."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"-o json-pretty"}),(0,i.jsx)("td",{children:"Display logs in JSON format."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"-p err"}),(0,i.jsxs)("td",{children:["Filter logs by priority (e.g. ",(0,i.jsx)(t.code,{children:"err"}),", ",(0,i.jsx)(t.code,{children:"warning"}),", ",(0,i.jsx)(t.code,{children:"info"}),", ",(0,i.jsx)(t.code,{children:"debug"}),")."]})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"-r"}),(0,i.jsx)("td",{children:"Display logs in reverse order (newest entries first)."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"--since today --until now"}),(0,i.jsx)("td",{children:"Display logs for a specific time range. Each endpoint is optional."})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"-u nginx.service"}),(0,i.jsx)("td",{children:"Show logs for a specific service."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"sample-unit-file-insyncservice-app-auto-start",children:"Sample unit file insync.service (app auto start)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"[Unit]\nDescription=Insync client\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStartPre=/bin/sleep 10\nExecStart=/usr/bin/insync start\nRestartSec=3\n\n[Install]\nWantedBy=default.target\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Place the file in ",(0,i.jsx)(t.code,{children:"/home/$USER/.config/systemd/user"})]}),"\n",(0,i.jsx)(t.p,{children:"Then run"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"systemctl --user enable insync\n"})}),"\n",(0,i.jsx)(t.p,{children:"or"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"sudo systemctl enable insync\n"})}),"\n",(0,i.jsx)(t.p,{children:"to start it for all users."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>d});var n=s(6540);const i={},r=n.createContext(i);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);